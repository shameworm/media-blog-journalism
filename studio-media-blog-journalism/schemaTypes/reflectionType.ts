import {defineField, defineType} from 'sanity'

export const reflectionType = defineType({
  name: 'reflection',
  title: '–†–µ—Ñ–ª–µ–∫—Å—ñ—ó (–ï—Å–µ –°—Ç—É–¥–µ–Ω—Ç—ñ–≤)',
  type: 'document',
  fields: [
    defineField({
      name: 'title',
      title: '–ù–∞–∑–≤–∞ –ï—Å–µ',
      type: 'string',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'slug',
      title: 'Slug',
      type: 'slug',
      options: {
        source: 'title',
        maxLength: 96,
      },
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'studentName',
      title: '–Ü–º\'—è –°—Ç—É–¥–µ–Ω—Ç–∞',
      type: 'string',
      validation: (Rule) => Rule.required(),
      description: '–ü–æ–≤–Ω–µ —ñ–º\'—è —Å—Ç—É–¥–µ–Ω—Ç–∞, —è–∫–∏–π –Ω–∞–ø–∏—Å–∞–≤ –µ—Å–µ',
    }),
    defineField({
      name: 'studentEmail',
      title: 'Email –°—Ç—É–¥–µ–Ω—Ç–∞',
      type: 'string',
      validation: (Rule) => Rule.email(),
    }),
    defineField({
      name: 'relatedBiography',
      title: '–ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è –ñ—É—Ä–Ω–∞–ª—ñ—Å—Ç–∞',
      type: 'reference',
      to: [{type: 'biography'}],
      validation: (Rule) => Rule.required(),
      description: '–û–±–µ—Ä—ñ—Ç—å –∂—É—Ä–Ω–∞–ª—ñ—Å—Ç–∞, –ø—Ä–æ —è–∫–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –µ—Å–µ',
    }),
    defineField({
      name: 'essay',
      title: '–¢–µ–∫—Å—Ç –ï—Å–µ',
      type: 'array',
      of: [
        {
          type: 'block',
          styles: [
            {title: '–ó–≤–∏—á–∞–π–Ω–∏–π', value: 'normal'},
            {title: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2', value: 'h2'},
            {title: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3', value: 'h3'},
            {title: '–¶–∏—Ç–∞—Ç–∞', value: 'blockquote'},
          ],
          marks: {
            decorators: [
              {title: '–ñ–∏—Ä–Ω–∏–π', value: 'strong'},
              {title: '–ö—É—Ä—Å–∏–≤', value: 'em'},
              {title: '–ü—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–∏–π', value: 'underline'},
            ],
            annotations: [
              {
                name: 'link',
                type: 'object',
                title: '–ü–æ—Å–∏–ª–∞–Ω–Ω—è',
                fields: [
                  {
                    name: 'href',
                    type: 'url',
                    title: 'URL',
                  },
                ],
              },
            ],
          },
        },
        {
          type: 'image',
          options: {
            hotspot: true,
          },
          fields: [
            {
              name: 'alt',
              type: 'string',
              title: '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç',
            },
            {
              name: 'caption',
              type: 'string',
              title: '–ü—ñ–¥–ø–∏—Å',
            },
          ],
        },
      ],
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'submittedAt',
      title: '–î–∞—Ç–∞ –ü–æ–¥–∞–Ω–Ω—è',
      type: 'datetime',
      initialValue: () => new Date().toISOString(),
    }),

    // Workflow –ø–æ–ª—è
    defineField({
      name: 'status',
      title: '–°—Ç–∞—Ç—É—Å',
      type: 'string',
      options: {
        list: [
          {title: '–ß–µ—Ä–Ω–µ—Ç–∫–∞', value: 'draft'},
          {title: '–ù–∞ –†–æ–∑–≥–ª—è–¥—ñ', value: 'in_review'},
          {title: '–ü–æ—Ç—Ä–µ–±—É—î –ó–º—ñ–Ω', value: 'changes_requested'},
          {title: '–°—Ö–≤–∞–ª–µ–Ω–æ', value: 'approved'},
          {title: '–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ', value: 'published'},
        ],
      },
      initialValue: 'draft',
      validation: (Rule) => Rule.required(),
    }),
    defineField({
      name: 'assignedChiefEditor',
      title: '–ì–æ–ª–æ–≤–Ω–∏–π –†–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏',
      type: 'string',
      description: '–Ü–º\'—è –∞–±–æ email –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞',
    }),
    defineField({
      name: 'grade',
      title: '–û—Ü—ñ–Ω–∫–∞',
      type: 'string',
      description: '–û—Ü—ñ–Ω–∫–∞ –∞–±–æ –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞',
    }),
    defineField({
      name: 'comments',
      title: '–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ',
      type: 'array',
      of: [
        {
          type: 'object',
          fields: [
            {
              name: 'author',
              title: '–ê–≤—Ç–æ—Ä',
              type: 'string',
            },
            {
              name: 'text',
              title: '–¢–µ–∫—Å—Ç –ö–æ–º–µ–Ω—Ç–∞—Ä—è',
              type: 'text',
              rows: 3,
            },
            {
              name: 'createdAt',
              title: '–î–∞—Ç–∞ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è',
              type: 'datetime',
              initialValue: () => new Date().toISOString(),
            },
            {
              name: 'resolved',
              title: '–í–∏—Ä—ñ—à–µ–Ω–æ',
              type: 'boolean',
              initialValue: false,
            },
          ],
          preview: {
            select: {
              title: 'author',
              subtitle: 'text',
              resolved: 'resolved',
            },
            prepare({title, subtitle, resolved}) {
              return {
                title: `${resolved ? '‚úì' : '‚óã'} ${title}`,
                subtitle: subtitle,
              }
            },
          },
        },
      ],
    }),
    defineField({
      name: 'revisionHistory',
      title: '–Ü—Å—Ç–æ—Ä—ñ—è –ó–º—ñ–Ω –°—Ç–∞—Ç—É—Å—É',
      type: 'array',
      readOnly: true,
      of: [
        {
          type: 'object',
          fields: [
            {
              name: 'status',
              title: '–°—Ç–∞—Ç—É—Å',
              type: 'string',
            },
            {
              name: 'changedBy',
              title: '–ó–º—ñ–Ω–µ–Ω–æ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º',
              type: 'string',
            },
            {
              name: 'changedAt',
              title: '–î–∞—Ç–∞ –ó–º—ñ–Ω–∏',
              type: 'datetime',
            },
            {
              name: 'note',
              title: '–ü—Ä–∏–º—ñ—Ç–∫–∞',
              type: 'text',
            },
          ],
        },
      ],
    }),
  ],
  preview: {
    select: {
      title: 'title',
      subtitle: 'studentName',
      status: 'status',
      biography: 'relatedBiography.fullName',
    },
    prepare({title, subtitle, status, biography}) {
      const statusEmoji = {
        draft: 'üìù',
        in_review: 'üëÄ',
        changes_requested: 'üîÑ',
        approved: '‚úÖ',
        published: 'üåü',
      }
      return {
        title: title,
        subtitle: `${subtitle} ‚Üí ${biography || '–ù–µ –æ–±—Ä–∞–Ω–æ'} | ${statusEmoji[status as keyof typeof statusEmoji] || ''} ${status}`,
      }
    },
  },
})
